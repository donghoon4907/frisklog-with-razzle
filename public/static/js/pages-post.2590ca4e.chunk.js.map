{"version":3,"sources":["webpack:///./src/components/Subject.jsx","webpack:///./src/graphql/mutation/post.js","webpack:///./src/lib/date.js","webpack:///./src/pages/post/CreatePostPage.jsx","webpack:///./src/components/Meta.jsx","webpack:///./src/graphql/query/comment.js","webpack:///./src/graphql/mutation/comment.js","webpack:///./src/components/CommentItem.jsx","webpack:///./src/components/CommentList.jsx","webpack:///./src/components/Viewer.jsx","webpack:///./src/pages/post/index.jsx","webpack:///./src/pages/post/UpdatePostPage.jsx","webpack:///./src/components/Editor.jsx","webpack:///./src/graphql/query/post.js"],"names":["Container","styled","h1","props","activeBorder","theme","media","phone","Subject","children","CREATE_POST","gql","UPDATE_POST","DELETE_POST","LIKE_POST","timeForToday","value","today","Date","timeValue","betweenTime","Math","floor","getTime","betweenTimeHour","betweenTimeDay","betweenTimeWeek","betweenTimeMonth","form","CategoryWrapper","div","SubmitWrapper","CreatePostPage","dispatch","useDispatch","useMutation","create","loading","title","useInput","category","useState","content","setContent","handleSubmit","useCallback","e","a","preventDefault","getStorage","TOKEN_KEY","alert","length","reg","foundThumbnails","match","thumbnail","substring","indexOf","lastIndexOf","description","replace","reg2","confirm","variables","data","createPost","JSON","parse","message","status","type","SHOW_LOGIN_MODAL","onSubmit","placeholder","name","autoComplete","required","label","onChange","Meta","GET_COMMENTS","CREATE_COMMENT","UPDATE_COMMENT","DELETE_COMMENT","CommentWrapper","boxBorder","InfoWrapper","BtnWrapper","infoColor","OptionWrapper","MoreWrapper","CommentItem","id","user","createdAt","userId","useSelector","upd","updateLoading","del","deleteLoading","comment","active","setActive","contentState","setContentState","disabled","setDisabled","isMyComment","handleActive","handleCancel","handleUpdate","handleDelete","Loader","Avatar","src","avatar","url","size","nickname","Dropdown","Toggle","Menu","Item","onClick","Divider","Form","height","Button","memo","CommentContainer","CommentList","useRouteMatch","params","useQuery","first","postId","notifyOnNetworkStatusChange","fetchMore","refetch","createLoading","setValue","handleFetchMore","comments","$main","document","querySelector","scrollHeight","clientHeight","scrollTop","skip","updateQuery","prev","fetchMoreResult","total","useEffect","addEventListener","removeEventListener","map","key","Viewer","window","require","PostViewer","initialValue","initialEditType","Column","IconWrapper","Post","history","useHistory","GET_POST","like","isLike","setIsLike","likeCount","setLikeCount","handleLike","deletePost","push","post","likes","isLikePost","some","isMyPost","viewCount","BtnLink","to","aria-pressed","style","width","className","UpdatePostPage","updatePostLoading","updatePost","Editor","PostEditor","previewStyle","useCommandShortcut","useLazyAxios","call","$editor","useRef","handleChange","instance","current","getInstance","getMarkdown","ref","hooks","addImageBlobHook","blob","callback","formData","FormData","append","method","process","headers","error","GET_POSTS"],"mappings":"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","file":"static/js/pages-post.2590ca4e.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.h1`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-bottom: ${(props) => props.activeBorder && `2px solid gray`};\n    font-weight: bold;\n    padding: 5px;\n\n    & svg {\n        width: 20px;\n        height: 20px;\n    }\n\n    ${(props) => props.theme.media.phone} {\n        font-size: 24px;\n    }\n`;\n\n/**\n * 공통 subject 컴포넌트\n *\n * @Component\n * @author frisk\n * @param props.activeBorder 테두리 유무\n */\nconst Subject = ({ children, activeBorder }) => (\n    <Container activeBorder={activeBorder}>{children}</Container>\n);\n\nexport default Subject;\n","import { gql } from \"@apollo/client\";\n\n/**\n * * 게시물 추가\n *\n * @mutation\n * @author frisk\n * @param $title 제목\n * @param $description 소개\n * @param $content 내용\n * @param $category 카테고리\n * @param $thumbnail 썸네일\n */\nexport const CREATE_POST = gql`\n    mutation createPost(\n        $title: String!\n        $description: String!\n        $content: String!\n        $category: String!\n        $thumbnail: String\n    ) {\n        createPost(\n            title: $title\n            description: $description\n            content: $content\n            category: $category\n            thumbnail: $thumbnail\n        )\n    }\n`;\n\n/**\n * * 게시물 수정\n *\n * @mutation\n * @author frisk\n * @param $id 공지사항 ID\n * @param $title 제목\n * @param $description 소개\n * @param $content 내용\n * @param $category 카테고리\n * @param $thumbnail 썸네일\n */\nexport const UPDATE_POST = gql`\n    mutation updatePost(\n        $id: String!\n        $title: String!\n        $description: String!\n        $content: String!\n        $category: String!\n        $thumbnail: String\n    ) {\n        updatePost(\n            id: $id\n            title: $title\n            description: $description\n            content: $content\n            category: $category\n            thumbnail: $thumbnail\n        )\n    }\n`;\n\n/**\n * * 게시물 삭제\n *\n * @mutation\n * @author frisk\n * @param $id 게시물 ID\n */\nexport const DELETE_POST = gql`\n    mutation deletePost($id: String!) {\n        deletePost(id: $id)\n    }\n`;\n\n/**\n * * 게시물 좋아요 / 좋아요 취소\n *\n * @mutation\n * @author frisk\n * @param $id 게시물 ID\n */\nexport const LIKE_POST = gql`\n    mutation likePost($id: String!) {\n        likePost(id: $id)\n    }\n`;\n","export const timeForToday = (value) => {\n    const today = new Date();\n    const timeValue = new Date(value);\n\n    const betweenTime = Math.floor(\n        (today.getTime() - timeValue.getTime()) / 1000 / 60\n    );\n    if (betweenTime < 1) return \"방금 전\";\n    if (betweenTime < 60) {\n        return `${betweenTime}분 전`;\n    }\n\n    const betweenTimeHour = Math.floor(betweenTime / 60);\n    if (betweenTimeHour < 24) {\n        return `${betweenTimeHour}시간 전`;\n    }\n\n    const betweenTimeDay = Math.floor(betweenTime / 60 / 24);\n    if (betweenTimeDay < 31) {\n        return `${betweenTimeDay}일 전`;\n    }\n\n    const betweenTimeWeek = Math.floor(betweenTime / 60 / 24 / 7);\n    if (betweenTimeWeek < 5) {\n        return `${betweenTimeWeek}주 전`;\n    }\n\n    const betweenTimeMonth = Math.floor(betweenTime / 60 / 24 / 7 / 12);\n    if (betweenTimeMonth < 13) {\n        return `${betweenTimeMonth}개월 전`;\n    }\n\n    return `${Math.floor(betweenTimeDay / 365)}년 전`;\n};\n","import React, { useState, useCallback } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport styled from \"styled-components\";\nimport { CREATE_POST } from \"../../graphql/mutation/post\";\nimport { useDispatch } from \"../../context\";\nimport { SHOW_LOGIN_MODAL } from \"../../context/action\";\nimport Editor from \"../../components/Editor\";\nimport { FormInput } from \"../../components/Form\";\nimport Button from \"../../components/Button\";\nimport { useInput } from \"../../hooks\";\nimport Loader from \"../../components/Loader\";\nimport { TOKEN_KEY, getStorage } from \"../../lib/state\";\n\nconst Container = styled.form`\n    & input {\n        background: white;\n    }\n`;\n\nconst CategoryWrapper = styled.div`\n    height: auto;\n    display: flex;\n    justify-content: flex-start;\n`;\n\nconst SubmitWrapper = styled.div`\n    margin-top: 1rem;\n`;\n\n/**\n * 게시물 등록 화면 컴포넌트\n *\n * @Page\n * @author frist\n */\nconst CreatePostPage = () => {\n    /**\n     * 로컬 상태 변경 모듈 활성화\n     */\n    const dispatch = useDispatch();\n    /**\n     * 게시물 등록 mutation 활성화\n     */\n    const [create, { loading }] = useMutation(CREATE_POST);\n    /**\n     * 제목 입력을 위한 useInput 활성화\n     */\n    const title = useInput(\"\");\n    /**\n     * 카테고리 입력을 위한 useInput 활성화\n     */\n    const category = useInput(\"\", \"no_space\");\n    /**\n     * 내용 상태 관리 모듈 활성화\n     */\n    const [content, setContent] = useState(\"\");\n    /**\n     * 등록 핸들러\n     */\n    const handleSubmit = useCallback(\n        async (e) => {\n            e.preventDefault();\n            /**\n             * 토큰 로드\n             */\n            const token = getStorage(TOKEN_KEY);\n\n            if (token) {\n                /**\n                 * 등록 요청 중인 경우\n                 */\n                if (loading) {\n                    return alert(\"요청 중입니다\");\n                }\n                if (title.value.length > 50) {\n                    return alert(\"제목은 50자 미만으로 입력하세요.\");\n                }\n                if (category.value.length > 10) {\n                    return alert(\"카테고리는 10자 미만으로 입력하세요.\");\n                }\n                /**\n                 * 썸네일, 설명\n                 * @type {string|undefined}\n                 */\n                let thumbnail, description;\n                /**\n                 * 썸네일 제거 정규식\n                 */\n                const reg = /\\!\\[([^\\]]+)\\]\\(([^\\)]+)\\)/g;\n\n                let foundThumbnails = content.match(reg);\n\n                if (foundThumbnails) {\n                    thumbnail = foundThumbnails[0].substring(\n                        foundThumbnails[0].indexOf(\"(\") + 1,\n                        foundThumbnails[0].lastIndexOf(\")\")\n                    );\n                    description = content.replace(reg, \"\");\n                } else {\n                    description = content;\n                }\n                /**\n                 * 특수문자 제거 정규식\n                 */\n                const reg2 = /[\\{\\}\\[\\]\\/?.,;:|\\)*~`!^\\-_+<>@\\#$%&\\\\\\=\\(\\'\\\"]/gi;\n\n                description = description.replace(reg2, \"\");\n\n                const tf = confirm(\"입력한 내용으로 게시물을 등록하시겠어요?\");\n\n                if (tf) {\n                    try {\n                        const {\n                            data: { createPost }\n                        } = await create({\n                            variables: {\n                                title: title.value,\n                                description,\n                                content,\n                                category: category.value,\n                                thumbnail\n                            }\n                        });\n                        if (createPost) {\n                            alert(\"게시물이 등록되었습니다.\");\n                        }\n                    } catch (error) {\n                        const { message, status } = JSON.parse(error.message);\n                        if (status === 401) {\n                            /**\n                             * 로그인 팝업 보이기\n                             */\n                            dispatch({\n                                type: SHOW_LOGIN_MODAL\n                            });\n                        } else {\n                            alert(message);\n                        }\n                    }\n                }\n            } else {\n                /**\n                 * 로그인 팝업 보이기\n                 */\n                dispatch({\n                    type: SHOW_LOGIN_MODAL\n                });\n            }\n        },\n        [title.value, category.value, content]\n    );\n\n    return (\n        <Container onSubmit={handleSubmit}>\n            {loading && <Loader />}\n            <CategoryWrapper>\n                <FormInput\n                    type=\"text\"\n                    placeholder=\"카테고리를 입력하세요\"\n                    name=\"category\"\n                    autoComplete=\"off\"\n                    required\n                    {...category}\n                    label=\"카테고리\"\n                />\n            </CategoryWrapper>\n            <FormInput\n                type=\"text\"\n                placeholder=\"제목을 입력하세요\"\n                name=\"title\"\n                autoComplete=\"off\"\n                required\n                {...title}\n                label=\"제목\"\n            />\n            <Editor onChange={(content) => setContent(content)} />\n            <SubmitWrapper>\n                <Button type=\"submit\">등록</Button>\n            </SubmitWrapper>\n        </Container>\n    );\n};\n\nexport default CreatePostPage;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\n/**\n * * 검색엔진 최적화를 위한 메타 컴포넌트\n *\n * @Component\n * @author frisk\n * @param props.title Head title\n */\nconst Meta = ({ title, description }) => (\n    <Helmet>\n        <title>{title || \"Frisklog\"}</title>\n        <meta\n            name=\"description\"\n            content={description || \"Blog made by frisk\"}\n        />\n        <meta name=\"twitter:title\" content={title || \"Frisklog\"} />\n        <meta\n            name=\"twitter:description\"\n            content={description || \"Blog made by frisk\"}\n        />\n        <meta name=\"twitter:image:alt\" content=\"frisklog\" />\n    </Helmet>\n);\n\nexport default Meta;\n","import { gql } from \"@apollo/client\";\n\n/**\n * * 댓글 검색\n *\n * @query\n * @author frisk\n * @param $skip 건너뛸 목록의 수\n * @param $first 요청 목록의 수\n * @param $orderBy 정렬\n * @param $postId 게시물 ID\n */\nexport const GET_COMMENTS = gql`\n    query GetComments(\n        $skip: Int\n        $first: Int\n        $orderBy: String\n        $postId: String\n    ) {\n        comments(\n            skip: $skip\n            first: $first\n            orderBy: $orderBy\n            postId: $postId\n        ) {\n            data {\n                id\n                user {\n                    id\n                    nickname\n                    avatar {\n                        url\n                    }\n                }\n                post {\n                    id\n                    commentCount\n                }\n                content\n                createdAt\n                updatedAt\n            }\n            total\n        }\n    }\n`;\n","import { gql } from \"@apollo/client\";\n\n/**\n * * 댓글 추가\n *\n * @mutation\n * @author frisk\n * @param $postId 게시물 ID\n * @param $content 내용\n */\nexport const CREATE_COMMENT = gql`\n    mutation createComment($postId: String!, $content: String!) {\n        createComment(postId: $postId, content: $content)\n    }\n`;\n\n/**\n * * 댓글 수정\n *\n * @mutation\n * @author frisk\n * @param $id ID\n * @param $content 내용\n */\nexport const UPDATE_COMMENT = gql`\n    mutation updateComment($id: String!, $content: String!) {\n        updateComment(id: $id, content: $content)\n    }\n`;\n\n/**\n * * 댓글 삭제\n *\n * @mutation\n * @author frisk\n * @param $id ID\n */\nexport const DELETE_COMMENT = gql`\n    mutation deleteComment($id: String!) {\n        deleteComment(id: $id)\n    }\n`;\n","import React, { FC, useState, useCallback, memo } from \"react\";\nimport styled from \"styled-components\";\nimport { useMutation } from \"@apollo/client\";\nimport { Dropdown } from \"react-bootstrap\";\nimport { UPDATE_COMMENT, DELETE_COMMENT } from \"../graphql/mutation/comment\";\nimport { useInput } from \"../hooks\";\nimport { FormTextArea } from \"./Form\";\nimport Avatar from \"./Avatar\";\nimport Button from \"./Button\";\nimport { TOKEN_KEY, getStorage } from \"../lib/state\";\nimport { useDispatch } from \"../context\";\nimport { SHOW_LOGIN_MODAL } from \"../context/action\";\nimport { useSelector } from \"../context\";\nimport { More } from \"../assets/icon\";\nimport Loader from \"./Loader\";\nimport { timeForToday } from \"../lib/date\";\n\nconst CommentWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    border-top: ${(props) => props.theme.boxBorder};\n    padding-top: 1rem;\n    padding-bottom: 1rem;\n`;\n\nconst InfoWrapper = styled.div`\n    margin-bottom: 50px;\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n\n    & > * {\n        margin-right: 10px;\n    }\n`;\n\nconst BtnWrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n\n    & > button {\n        flex: 1;\n    }\n\n    & > button:nth-child(1) {\n        background: ${(props) => props.theme.infoColor};\n        border: 1px solid ${(props) => props.theme.infoColor};\n    }\n`;\n\nconst OptionWrapper = styled.div`\n    flex: 1;\n    text-align: right;\n    position: relative;\n`;\n\nconst MoreWrapper = styled.div`\n    position: relative;\n    & #dropdown-custom-2 {\n        position: absolute;\n        top: -20px;\n        right: 0;\n        opacity: 0;\n        z-index: 1;\n    }\n\n    & svg {\n        fill: gray;\n        cursor: pointer;\n        position: absolute;\n        top: -10px;\n        right: -5px;\n    }\n`;\n\n/**\n * 댓글 렌더링 컴포넌트\n *\n * @Component\n * @author frisk\n */\nconst CommentItem = ({ id, content, user, createdAt }) => {\n    /**\n     * 로컬 상태 변경 모듈 활성화\n     */\n    const dispatch = useDispatch();\n    /**\n     * 로컬 상태 관리 모듈 활성화\n     */\n    const { id: userId } = useSelector();\n    /**\n     * 댓글 수정 mutation 활성화\n     */\n    const [upd, { loading: updateLoading }] = useMutation(UPDATE_COMMENT);\n    /**\n     * 댓글 삭제 mutation 활성화\n     */\n    const [del, { loading: deleteLoading }] = useMutation(DELETE_COMMENT);\n    /**\n     * 댓글 입력을 위한 useInput 활성화\n     */\n    const comment = useInput(content);\n    /**\n     * 수정모드 전환 상태 관리 모듈 활성화\n     */\n    const [active, setActive] = useState(false);\n    /**\n     * 수정모드 전환 상태 관리 모듈 활성화\n     */\n    const [contentState, setContentState] = useState(content);\n    /**\n     * 삭제 상태 관리 모듈 활성화\n     */\n    const [disabled, setDisabled] = useState(false);\n    /**\n     * 내가 작성한 댓글 여부\n     */\n    const isMyComment = userId ? userId === user.id : false;\n    /**\n     * 수정 모드 전환 핸들러\n     */\n    const handleActive = useCallback(() => {\n        setActive(true);\n    }, []);\n    /**\n     * 취소 핸들러\n     */\n    const handleCancel = useCallback(() => {\n        const tf = confirm(\"수정을 취소하시겠어요?\");\n        if (tf) {\n            setActive(false);\n        }\n    }, []);\n    /**\n     * 댓글 수정 핸들러\n     */\n    const handleUpdate = useCallback(async () => {\n        /**\n         * 요청 중인 경우\n         */\n        if (updateLoading) {\n            return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n        }\n\n        /**\n         * 토큰 로드\n         */\n        const token = getStorage(TOKEN_KEY);\n\n        if (token) {\n            if (comment.value.length > 100) {\n                return alert(\"댓글은 100자 미만으로 입력 해주세요.\");\n            }\n            const tf = confirm(\"입력한 내용으로 수정하시겠어요?\");\n\n            if (tf) {\n                try {\n                    await upd({\n                        variables: { id, content: comment.value }\n                    });\n                    /**\n                     * 댓글 랜더링 상태 변경\n                     */\n                    setContentState(comment.value);\n                    /**\n                     * 수정 모드 해제\n                     */\n                    setActive(false);\n                } catch (error) {\n                    const { message, status } = JSON.parse(error.message);\n                    if (status === 401) {\n                        /**\n                         * 로그인 팝업 보이기\n                         */\n                        dispatch({\n                            type: SHOW_LOGIN_MODAL\n                        });\n                    } else {\n                        alert(message);\n                    }\n                }\n            }\n        } else {\n            /**\n             * 로그인 팝업 보이기\n             */\n            dispatch({\n                type: SHOW_LOGIN_MODAL\n            });\n        }\n    }, [updateLoading, comment.value]);\n    /**\n     * 댓글 삭제 핸들러\n     */\n    const handleDelete = useCallback(async () => {\n        /**\n         * 요청 중인 경우\n         */\n        if (deleteLoading) {\n            return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n        }\n\n        const tf = confirm(\"댓글을 삭제하시겠어요?\");\n\n        if (tf) {\n            try {\n                await del({\n                    variables: { id }\n                });\n                /**\n                 * 컴포넌트 비활성화\n                 */\n                setDisabled(true);\n                /**\n                 * 수정 모드 해제\n                 */\n                setActive(false);\n            } catch (error) {\n                const { message } = JSON.parse(error.message);\n                alert(message);\n            }\n        }\n    }, []);\n\n    return (\n        <CommentWrapper>\n            {(updateLoading || deleteLoading) && <Loader />}\n            <InfoWrapper>\n                <Avatar src={user.avatar.url} size=\"50\" userId={user.id} />\n                <span>{user.nickname}</span>\n                <span>·</span>\n                <span>{timeForToday(createdAt)}</span>\n                {isMyComment && (\n                    <OptionWrapper>\n                        <MoreWrapper>\n                            <Dropdown>\n                                <Dropdown.Toggle id=\"dropdown-custom-2\" />\n                                {!disabled && <More />}\n                                <Dropdown.Menu>\n                                    <Dropdown.Item onClick={handleActive}>\n                                        수정\n                                    </Dropdown.Item>\n                                    <Dropdown.Divider />\n                                    <Dropdown.Item onClick={handleDelete}>\n                                        삭제\n                                    </Dropdown.Item>\n                                </Dropdown.Menu>\n                            </Dropdown>\n                        </MoreWrapper>\n                    </OptionWrapper>\n                )}\n            </InfoWrapper>\n            {active ? (\n                <>\n                    <FormTextArea\n                        placeholder=\"댓글을 입력하세요.\"\n                        name=\"comment\"\n                        autoComplete=\"off\"\n                        height={100}\n                        label=\"댓글\"\n                        {...comment}\n                    />\n                    <BtnWrapper>\n                        <Button onClick={handleCancel}>취소</Button>\n                        <Button onClick={handleUpdate}>댓글 수정</Button>\n                    </BtnWrapper>\n                </>\n            ) : (\n                <pre>\n                    {disabled ? <em>삭제된 댓글입니다.</em> : contentState}\n                </pre>\n            )}\n        </CommentWrapper>\n    );\n};\n\nexport default memo(CommentItem);\n","import React, { memo, useCallback, useEffect } from \"react\";\nimport { useRouteMatch } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GET_COMMENTS } from \"../graphql/query/comment\";\nimport { CREATE_COMMENT } from \"../graphql/mutation/comment\";\nimport { useInput } from \"../hooks\";\nimport { FormTextArea } from \"./Form\";\nimport Button from \"./Button\";\nimport { TOKEN_KEY, getStorage } from \"../lib/state\";\nimport { useDispatch } from \"../context\";\nimport { SHOW_LOGIN_MODAL } from \"../context/action\";\nimport CommentItem from \"./CommentItem\";\nimport Loader from \"./Loader\";\n\nconst CommentContainer = styled.form`\n    margin-top: 30px;\n    display: flex;\n    flex-direction: column;\n`;\n\n/**\n * * 댓글 목록 렌더링 컴포넌트\n *\n * @Component\n * @author frisk\n */\nconst CommentList = () => {\n    /**\n     * route match 모듈 활성화\n     */\n    const {\n        params: { id }\n    } = useRouteMatch(\"/post/:id\");\n    /**\n     * 로컬 상태 변경 모듈 활성화\n     */\n    const dispatch = useDispatch();\n    /**\n     * 댓글 목록 로드\n     */\n    const { data, loading, fetchMore, refetch } = useQuery(GET_COMMENTS, {\n        variables: {\n            first: 30,\n            postId: id\n        },\n        notifyOnNetworkStatusChange: true\n    });\n    /**\n     * 댓글 입력을 위한 useInput 활성화\n     */\n    const comment = useInput(\"\");\n    /**\n     * 댓글 추가 mutation 활성화\n     */\n    const [create, { loading: createLoading }] = useMutation(CREATE_COMMENT);\n\n    /**\n     * 댓글 추가 핸들러\n     */\n    const handleSubmit = useCallback(\n        async (e) => {\n            e.preventDefault();\n            /**\n             * 요청 중인 경우\n             */\n            if (createLoading) {\n                return alert(\"요청 중입니다. 잠시만 기다려주세요.\");\n            }\n            /**\n             * 토큰 로드\n             */\n            const token = getStorage(TOKEN_KEY);\n\n            if (token) {\n                if (comment.value.length > 100) {\n                    return alert(\"댓글은 100자 미만으로 입력 해주세요.\");\n                }\n\n                try {\n                    await create({\n                        variables: {\n                            postId: id,\n                            content: comment.value\n                        }\n                    });\n\n                    /**\n                     * 댓글 초기화\n                     */\n                    refetch();\n                    comment.setValue(\"\");\n                } catch (error) {\n                    const { message, status } = JSON.parse(error.message);\n                    if (status === 401) {\n                        /**\n                         * 로그인 팝업 보이기\n                         */\n                        dispatch({\n                            type: SHOW_LOGIN_MODAL\n                        });\n                    } else {\n                        alert(message);\n                    }\n                }\n            } else {\n                /**\n                 * 로그인 팝업 보이기\n                 */\n                dispatch({\n                    type: SHOW_LOGIN_MODAL\n                });\n            }\n        },\n        [comment.value, createLoading]\n    );\n\n    /**\n     * 스크롤 이벤트 핸들러\n     */\n    const handleFetchMore = () => {\n        if (data && data.comments) {\n            /**\n             * 요청 중인 경우\n             */\n            if (loading) {\n                return;\n            }\n            const $main = document.querySelector(\"#main\");\n\n            const { scrollHeight, clientHeight, scrollTop } = $main;\n\n            const { comments } = data;\n\n            if (scrollTop + clientHeight === scrollHeight) {\n                if (\n                    comments.data.length > 0 &&\n                    comments.data.length % 30 === 0\n                ) {\n                    /**\n                     * 추가 게시물 요청\n                     */\n                    fetchMore({\n                        variables: {\n                            skip: comments.data.length,\n                            first: 30,\n                            postId: id\n                        },\n                        updateQuery: (prev, { fetchMoreResult }) => {\n                            if (fetchMoreResult) {\n                                return {\n                                    comments: {\n                                        data: [\n                                            ...prev.comments.data,\n                                            ...fetchMoreResult.comments.data\n                                        ],\n                                        total: comments.total\n                                    }\n                                };\n                            } else {\n                                return prev;\n                            }\n                        }\n                    });\n                }\n            }\n        }\n    };\n\n    /**\n     * 라이프 사이클 모듈 활성화\n     */\n    useEffect(() => {\n        const $main = document.querySelector(\"#main\");\n        /**\n         * 스크롤 이벤트 바인딩\n         */\n        $main.addEventListener(\"scroll\", handleFetchMore);\n        /**\n         * 스크롤 이벤트 언바인딩\n         */\n        return () => $main.removeEventListener(\"scroll\", handleFetchMore);\n    }, [data && data.comments, loading]);\n\n    return (\n        <CommentContainer onSubmit={handleSubmit}>\n            {(loading || createLoading) && <Loader />}\n            <FormTextArea\n                placeholder=\"댓글을 입력하세요.\"\n                name=\"comment\"\n                autoComplete=\"off\"\n                height={100}\n                {...comment}\n                required\n                label=\"댓글\"\n            />\n            <Button type=\"submit\">댓글 작성</Button>\n            {data &&\n                data.comments.data.map((comment) => (\n                    <CommentItem key={comment.id} {...comment} />\n                ))}\n        </CommentContainer>\n    );\n};\n\nexport default memo(CommentList);\n","import React from \"react\";\n\nconst Viewer =\n    typeof window !== \"undefined\" && require(\"@toast-ui/react-editor\").Viewer;\n\n/**\n * * 게시물 에디터 컴포넌트\n *\n * @Component\n * @author frisk\n */\nconst PostViewer = (props) => {\n    const { initialValue, initialEditType } = props;\n\n    return (\n        typeof window !== \"undefined\" && (\n            <Viewer\n                {...props}\n                initialValue={initialValue || \"\"}\n                initialEditType={initialEditType || \"markdown\"}\n            />\n        )\n    );\n};\n\nexport default PostViewer;\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GET_POST } from \"../../graphql/query/post\";\nimport { DELETE_POST, LIKE_POST } from \"../../graphql/mutation/post\";\nimport { useDispatch, useSelector } from \"../../context\";\nimport { SHOW_LOGIN_MODAL } from \"../../context/action\";\nimport Avatar from \"../../components/Avatar\";\nimport BtnLink from \"../../components/BtnLink\";\nimport { HeartEmpty, HeartFull } from \"../../assets/icon\";\nimport { TOKEN_KEY, getStorage } from \"../../lib/state\";\nimport CommentList from \"../../components/CommentList\";\nimport Loader from \"../../components/Loader\";\nimport Meta from \"../../components/Meta\";\nimport Subject from \"../../components/Subject\";\nimport { timeForToday } from \"../../lib/date\";\nimport Viewer from \"../../components/Viewer\";\n\nconst InfoWrapper = styled.div`\n    margin-bottom: 1rem;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`;\n\nconst Column = styled.div`\n    display: flex;\n    flex-direction: row;\n    & > * {\n        margin-right: 10px;\n    }\n`;\n\nconst IconWrapper = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n\n    & > * {\n        margin-right: 5px;\n    }\n`;\n\n/**\n * 게시물 상세 화면 컴포넌트\n *\n * @Nextpage\n * @author frist\n */\nconst Post = ({\n    match: {\n        params: { id }\n    }\n}) => {\n    /**\n     * history 객체 활성화\n     */\n    const history = useHistory();\n    /**\n     * 로컬 상태 변경 모듈 활성화\n     */\n    const dispatch = useDispatch();\n    /**\n     * 로컬 상태 감시 모듈 활성화\n     */\n    const { id: userId } = useSelector();\n    /**\n     * 댓글 목록 로드\n     */\n    const { data } = useQuery(GET_POST, {\n        variables: {\n            id\n        }\n    });\n\n    /**\n     * 좋아요 mutation 활성화\n     */\n    const [like] = useMutation(LIKE_POST);\n    /**\n     * 게시물 삭제 mutation 활성화\n     */\n    const [del, { loading: deleteLoading }] = useMutation(DELETE_POST);\n    /**\n     * 좋아요 여부 상태 관리 모듈 활성화\n     */\n    const [isLike, setIsLike] = useState(false);\n    /**\n     * 좋아요 수 상태 관리 모듈 활성화\n     */\n    const [likeCount, setLikeCount] = useState(false);\n    /**\n     * 좋아요 핸들러\n     */\n    const handleLike = useCallback(async () => {\n        /**\n         * 토큰 로드\n         */\n        const token = getStorage(TOKEN_KEY);\n\n        if (token) {\n            /**\n             * 좋아요 여부 상태 업데이트\n             */\n            setIsLike(!isLike);\n            /**\n             * 좋아요 수 상태 업데이트\n             */\n            setLikeCount(isLike ? likeCount - 1 : likeCount + 1);\n\n            try {\n                await like({\n                    variables: { id }\n                });\n            } catch (error) {\n                const { message } = JSON.parse(error.message);\n                alert(message);\n            }\n        } else {\n            /**\n             * 로그인 팝업 보이기\n             */\n            dispatch({\n                type: SHOW_LOGIN_MODAL\n            });\n        }\n    }, [isLike, likeCount]);\n    /**\n     * 게시물 삭제 핸들러\n     */\n    const handleDelete = useCallback(async () => {\n        /**\n         * 삭제 요청 중인 경우\n         */\n        if (deleteLoading) {\n            return alert(\"요청중입니다. 잠시만 기다려주세요.\");\n        }\n\n        const tf = confirm(\"포스트를 삭제하시겠어요?\");\n\n        if (tf) {\n            try {\n                const {\n                    data: { deletePost }\n                } = await del({\n                    variables: { id }\n                });\n\n                if (deletePost) {\n                    alert(\"포스트가 삭제되었습니다.\");\n                    /**\n                     * 피드 페이지로 이동\n                     */\n                    history.push(\"/\");\n                }\n            } catch (error) {\n                const { message } = JSON.parse(error.message);\n                alert(message);\n            }\n        }\n    }, [deleteLoading]);\n    /**\n     * 게시물 수정 핸들러\n     */\n    const handleUpdate = useCallback(() => {\n        const tf = confirm(\"게시물을 수정하러 가시겠어요?\");\n        if (tf) {\n            history.push(`/update_post/${id}`);\n        }\n    }, []);\n\n    /**\n     * 라이프 사이클 모듈 활성화\n     */\n    useEffect(() => {\n        if (data && data.post) {\n            const { likes } = data.post;\n            /**\n             * 내가 좋아요 했는지 여부\n             */\n            const isLikePost = likes.some((like) => like.user.id === userId);\n            /**\n             * 좋아요 여부 상태 업데이트\n             */\n            setIsLike(isLikePost);\n            /**\n             * 좋아요 수 상태 업데이트\n             */\n            setLikeCount(likes.length);\n        }\n    }, [data && data.post, userId]);\n\n    if (!data) {\n        return <Loader />;\n    }\n\n    const {\n        title,\n        description,\n        user,\n        createdAt,\n        content,\n        category,\n        viewCount\n    } = data.post;\n    /**\n     * 내가 작성했는지 여부\n     */\n    const isMyPost = userId ? userId === user.id : false;\n\n    return (\n        <div>\n            {deleteLoading && <Loader />}\n            <Meta title={`Frisklog - ${title}`} description={description} />\n            <Subject>{title}</Subject>\n            <InfoWrapper>\n                <Column>\n                    <Avatar src={user.avatar.url} size=\"30\" userId={user.id} />\n                    <span>{user.nickname}</span>\n                    <span>·</span>\n                    <span>{timeForToday(createdAt)}</span>\n                </Column>\n            </InfoWrapper>\n            <InfoWrapper>\n                <Column>\n                    <IconWrapper>\n                        <BtnLink to={`/category/${category}`}>\n                            {category}\n                        </BtnLink>\n                    </IconWrapper>\n                    <IconWrapper>\n                        <button\n                            type=\"button\"\n                            aria-pressed={isLike ? true : false}\n                            onClick={handleLike}\n                        >\n                            {isLike ? (\n                                <HeartFull style={{ width: 32, height: 32 }} />\n                            ) : (\n                                <HeartEmpty style={{ width: 32, height: 32 }} />\n                            )}\n                            <span className=\"a11y-hidden\">\n                                {isLike ? \"좋아요 취소하기\" : \"좋아요 하기\"}\n                            </span>\n                        </button>\n                        <span>{likeCount}</span>\n                    </IconWrapper>\n                </Column>\n\n                {isMyPost && (\n                    <div>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-info mr-1\"\n                            onClick={handleUpdate}\n                        >\n                            수정\n                        </button>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-danger m\"\n                            onClick={handleDelete}\n                        >\n                            삭제\n                        </button>\n                    </div>\n                )}\n            </InfoWrapper>\n            <Viewer initialValue={content} />\n            <hr />\n            <CommentList />\n        </div>\n    );\n};\n\nexport default Post;\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { UPDATE_POST } from \"../../graphql/mutation/post\";\nimport { GET_POST } from \"../../graphql/query/post\";\nimport { useDispatch } from \"../../context\";\nimport { SHOW_LOGIN_MODAL } from \"../../context/action\";\nimport Editor from \"../../components/Editor\";\nimport Button from \"../../components/Button\";\nimport { useInput } from \"../../hooks\";\nimport Loader from \"../../components/Loader\";\nimport { TOKEN_KEY, getStorage } from \"../../lib/state\";\nimport { FormInput } from \"../../components/Form\";\n\nconst Container = styled.div`\n    & input {\n        background: white;\n    }\n`;\n\nconst CategoryWrapper = styled.div`\n    height: auto;\n    min-height: 50px;\n    display: flex;\n    justify-content: flex-start;\n`;\n\nconst SubmitWrapper = styled.div`\n    margin-top: 1rem;\n`;\n\n/**\n * 게시물 수정 화면 컴포넌트\n *\n * @Nextpage\n * @author frist\n */\nconst UpdatePostPage = ({ match }) => {\n    /**\n     * 로컬 상태 변경 모듈 활성화\n     */\n    const dispatch = useDispatch();\n    /**\n     * 포스트 상세 로드\n     */\n    const { data } = useQuery(GET_POST, {\n        variables: {\n            id: match.params.id\n        }\n    });\n    /**\n     * 게시물 수정 mutation 활성화\n     */\n    const [upd, { loading: updatePostLoading }] = useMutation(UPDATE_POST);\n    /**\n     * 제목 입력을 위한 useInput 활성화\n     */\n    const title = useInput(\"\");\n    /**\n     * 카테고리 입력을 위한 useInput 활성화\n     */\n    const category = useInput(\"\", \"no_space\");\n    /**\n     * 내용 상태 관리 모듈 활성화\n     */\n    const [content, setContent] = useState(\"\");\n    /**\n     * 등록 핸들러\n     */\n    const handleSubmit = useCallback(async () => {\n        /**\n         * 토큰 로드\n         */\n        const token = getStorage(TOKEN_KEY);\n\n        if (token) {\n            /**\n             * 등록 요청 중인 경우\n             */\n            if (updatePostLoading) {\n                return alert(\"요청 중입니다\");\n            }\n            if (!title.value) {\n                return alert(\"제목을 입력하세요.\");\n            }\n            if (title.value.length > 50) {\n                return alert(\"제목은 50자 미만으로 입력하세요.\");\n            }\n            if (category.value.length > 10) {\n                return alert(\"카테고리는 10자 미만으로 입력하세요.\");\n            }\n            /**\n             * 썸네일, 설명\n             * @type {string|undefined}\n             */\n            let thumbnail, description;\n            /**\n             * 썸네일 유무 체크\n             */\n            const reg = /\\!\\[([^\\]]+)\\]\\(([^\\)]+)\\)/g;\n\n            let foundThumbnails = content.match(reg);\n\n            if (foundThumbnails) {\n                thumbnail = foundThumbnails[0].substring(\n                    foundThumbnails[0].indexOf(\"(\") + 1,\n                    foundThumbnails[0].lastIndexOf(\")\")\n                );\n                description = content.replace(reg, \"\");\n            } else {\n                description = content;\n            }\n            /**\n             * 특수문자 제거 정규식\n             */\n            const reg2 = /[\\{\\}\\[\\]\\/;:|\\)*~`!^\\-_+<>@\\#$%&\\\\\\=\\(\\'\\\"]/gi;\n\n            description = description.replace(reg2, \"\");\n\n            const tf = confirm(\"입력한 내용으로 게시물을 수정하시겠어요?\");\n\n            if (tf) {\n                try {\n                    const {\n                        data: { updatePost }\n                    } = await upd({\n                        variables: {\n                            id: post.id,\n                            title: title.value,\n                            description,\n                            content,\n                            category: category.value,\n                            thumbnail\n                        }\n                    });\n                    if (updatePost) {\n                        alert(\"게시물이 수정되었습니다.\");\n                    }\n                } catch (error) {\n                    const { message, status } = JSON.parse(error.message);\n                    if (status === 401) {\n                        /**\n                         * 로그인 팝업 보이기\n                         */\n                        dispatch({\n                            type: SHOW_LOGIN_MODAL\n                        });\n                    } else {\n                        alert(message);\n                    }\n                }\n            }\n        } else {\n            /**\n             * 로그인 팝업 보이기\n             */\n            dispatch({\n                type: SHOW_LOGIN_MODAL\n            });\n        }\n    }, [updatePostLoading, title.value, category.value, content]);\n\n    /**\n     * 라이프 사이클 모듈 활성화\n     */\n    useEffect(() => {\n        if (data && data.post) {\n            const { post } = data;\n            title.setValue(post.title);\n            category.setValue(post.category);\n            setContent(post.content);\n        }\n    }, [data]);\n\n    if (!data) {\n        return <Loader />;\n    }\n\n    const { post } = data;\n\n    return (\n        <Container>\n            {updatePostLoading && <Loader />}\n            <CategoryWrapper>\n                <FormInput\n                    type=\"text\"\n                    placeholder=\"카테고리를 입력하세요\"\n                    name=\"category\"\n                    autoComplete=\"off\"\n                    required\n                    label=\"카테고리\"\n                    {...category}\n                />\n            </CategoryWrapper>\n            <FormInput\n                type=\"text\"\n                placeholder=\"제목을 입력하세요\"\n                name=\"title\"\n                autoComplete=\"off\"\n                required\n                label=\"제목\"\n                {...title}\n            />\n            <Editor\n                onChange={(content) => setContent(content)}\n                initialValue={post.content}\n                initialEditType=\"markdown\"\n            />\n            <SubmitWrapper>\n                <Button onClick={handleSubmit}>수정</Button>\n            </SubmitWrapper>\n        </Container>\n    );\n};\n\nexport default UpdatePostPage;\n","import React, { useCallback, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport Loader from \"./Loader\";\nimport { useLazyAxios } from \"../hooks\";\n\nconst Editor =\n    typeof window !== \"undefined\" && require(\"@toast-ui/react-editor\").Editor;\n\nconst Container = styled.div`\n    & .te-tab-active {\n        ${(props) => props.theme.media.phone} {\n            width: 100% !important;\n        }\n    }\n\n    & .te-md-splitter {\n        ${(props) => props.theme.media.phone} {\n            display: none !important;\n        }\n    }\n\n    & .te-preview {\n        ${(props) => props.theme.media.phone} {\n            display: none !important;\n        }\n    }\n`;\n\n/**\n * * 게시물 에디터 컴포넌트\n *\n * @Component\n * @author frisk\n */\nconst PostEditor = (props) => {\n    const {\n        initialValue,\n        previewStyle,\n        height,\n        initialEditType,\n        useCommandShortcut\n    } = props;\n    /**\n     * 업로드 요청을 위한 Axios 활성화\n     */\n    const { loading, call } = useLazyAxios();\n    /**\n     * editor element\n     */\n    const $editor = useRef();\n    /**\n     * 에디터 변경 이벤트\n     */\n    const handleChange = useCallback(() => {\n        const instance = $editor.current.getInstance();\n        /**\n         * 에디터 output\n         * 1. instance.getMarkdown(): markdown type\n         * 2. instance.getHtml(): html type\n         */\n        props.onChange(instance.getMarkdown());\n    }, [props]);\n\n    return (\n        <Container>\n            {loading && <Loader />}\n            {typeof window !== \"undefined\" && (\n                <Editor\n                    {...props}\n                    initialValue={initialValue || \"\"}\n                    previewStyle={previewStyle || \"vertical\"}\n                    height={height || \"35rem\"}\n                    initialEditType={initialEditType || \"markdown\"}\n                    useCommandShortcut={useCommandShortcut || true}\n                    ref={$editor}\n                    onChange={handleChange}\n                    hooks={{\n                        addImageBlobHook: async (blob, callback) => {\n                            /**\n                             * 업로드 요청 중인 경우\n                             */\n                            if (loading) {\n                                alert(\"업로드 요청 중입니다.\");\n                                return;\n                            }\n\n                            const formData = new FormData();\n                            formData.append(\"file\", blob);\n\n                            const { data, error } = await call({\n                                method: \"post\",\n                                url: `${process.env.RAZZLE_BACKEND_API_PATH}/api/upload`,\n                                data: formData,\n                                headers: {\n                                    \"content-type\": \"multipart/form-data\"\n                                }\n                            });\n\n                            if (data) {\n                                callback(data, \"\");\n                            }\n\n                            if (error) {\n                                alert(\"썸네일 업로드 중 오류가 발생했습니다.\");\n                            }\n\n                            return false;\n                        }\n                    }}\n                />\n            )}\n        </Container>\n    );\n};\n\nexport default PostEditor;\n","import { gql } from \"@apollo/client\";\n\n/**\n * * 게시물 검색\n *\n * @query\n * @author frisk\n * @param $skip           건너뛸 목록의 수\n * @param $first          요청 목록의 수\n * @param $orderBy        정렬\n * @param $query          검색어\n * @param $category       카테고리\n * @param $userId         사용자 ID\n * @param $notNullThumb   썸네일 있는 것만 요청할 지\n */\nexport const GET_POSTS = gql`\n    query GetPosts(\n        $skip: Int\n        $first: Int\n        $orderBy: String\n        $query: String\n        $category: String\n        $userId: String\n        $notNullThumb: Boolean\n    ) {\n        posts(\n            skip: $skip\n            first: $first\n            orderBy: $orderBy\n            query: $query\n            category: $category\n            userId: $userId\n            notNullThumb: $notNullThumb\n        ) {\n            data {\n                id\n                title\n                description\n                user {\n                    id\n                    nickname\n                    avatar {\n                        url\n                    }\n                }\n                likeCount\n                likes {\n                    id\n                    user {\n                        id\n                    }\n                }\n                createdAt\n                updatedAt\n                viewCount\n                commentCount\n                category\n                thumbnail\n            }\n            total\n        }\n    }\n`;\n\n/**\n * * 게시물 상세 로드\n *\n * @query\n * @author frisk\n * @param $id 건너뛸 목록의 수\n */\nexport const GET_POST = gql`\n    query GetPost($id: String!) {\n        post(id: $id) {\n            id\n            title\n            description\n            content\n            user {\n                id\n                nickname\n                avatar {\n                    url\n                }\n            }\n            likeCount\n            likes {\n                id\n                user {\n                    id\n                }\n            }\n            createdAt\n            updatedAt\n            viewCount\n            category\n        }\n    }\n`;\n"],"sourceRoot":""}