{"version":3,"sources":["webpack:///./src/components/Subject.jsx","webpack:///./src/components/PostCardTypeItem.jsx","webpack:///./src/lib/date.js","webpack:///./src/components/Meta.jsx","webpack:///./src/pages/feed/index.jsx","webpack:///./src/graphql/query/post.js"],"names":["Container","styled","h1","props","activeBorder","theme","media","phone","Subject","children","div","tablet","CardImpressWrapper","whiteBox","CardSelector","article","CardThumbnailWrapper","CardThumbnail","MetaWrapper","TitleWrapper","Description","p","CardFooter","UserWrapper","MetaColumn","PostCardTypeItem","id","title","description","user","category","createdAt","likeCount","viewCount","thumbnail","commentCount","history","useHistory","onClick","push","src","alt","avatar","url","size","userId","nickname","to","timeForToday","value","today","Date","timeValue","betweenTime","Math","floor","getTime","betweenTimeHour","betweenTimeDay","betweenTimeWeek","betweenTimeMonth","Meta","name","content","PostWrapper","Feed","query","GET_POSTS","variables","first","orderBy","notNullThumb","data","posts","map","post","key","gql","GET_POST"],"mappings":"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","file":"static/js/pages-feed.18b16f87.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.h1`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    border-bottom: ${(props) => props.activeBorder && `2px solid gray`};\n    font-weight: bold;\n    padding: 5px;\n\n    & svg {\n        width: 20px;\n        height: 20px;\n    }\n\n    ${(props) => props.theme.media.phone} {\n        font-size: 24px;\n    }\n`;\n\n/**\n * 공통 subject 컴포넌트\n *\n * @Component\n * @author frisk\n * @param props.activeBorder 테두리 유무\n */\nconst Subject = ({ children, activeBorder }) => (\n    <Container activeBorder={activeBorder}>{children}</Container>\n);\n\nexport default Subject;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport Avatar from \"./Avatar\";\nimport { timeForToday } from \"../lib/date\";\nimport BtnLink from \"./BtnLink\";\n\nconst Container = styled.div`\n    padding: 0 1rem;\n    flex-basis: 33.3%;\n    max-width: 33.3%;\n    flex: 0 0 auto;\n    margin-bottom: 1rem;\n\n    ${(props) => props.theme.media.tablet} {\n        flex-basis: 100%;\n        max-width: 100%;\n        padding: 0;\n    }\n`;\n\nconst CardImpressWrapper = styled.div`\n    ${(props) => props.theme.whiteBox};\n    height: 100%;\n    box-shadow: rgba(0, 0, 0, 0.04) 0px 4px 16px 0px;\n`;\n\nconst CardSelector = styled.article`\n    display: flex;\n    flex-direction: column;\n`;\n\nconst CardThumbnailWrapper = styled.div`\n    position: relative;\n    width: 100%;\n    order: 1;\n    cursor: pointer;\n`;\n\nconst CardThumbnail = styled.div`\n    padding-bottom: 56.25%;\n\n    & > img {\n        position: absolute;\n        left: 0px;\n        width: 100%;\n        height: 100%;\n        top: 0px;\n    }\n`;\n\nconst MetaWrapper = styled.div`\n    margin-top: 0.5rem;\n    order: 2;\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    padding: 5px;\n    cursor: pointer;\n`;\n\nconst TitleWrapper = styled.div`\n    display: table;\n    table-layout: fixed;\n    width: 100%;\n    white-space: nowrap;\n    margin-bottom: 5px;\n\n    & > h3 {\n        display: table-cell;\n        overflow: hidden;\n        text-overflow: ellipsis;\n    }\n`;\n\nconst Description = styled.p`\n    font-size: 0.875rem;\n    line-height: 1.5;\n    height: 3.9375rem;\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n`;\n\nconst CardFooter = styled.div`\n    order: 3;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 5px;\n`;\n\nconst UserWrapper = styled.div`\n    flex: 1;\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    gap: 10px;\n`;\n\nconst MetaColumn = styled.div`\n    display: flex;\n    justfiy-content: flex-start;\n    align-items: center;\n\n    & span {\n        margin-right: 10px;\n        margin-left: 5px;\n    }\n`;\n\n/**\n * * 게시물 카드형 렌더링 컴포넌트\n *\n * @Component\n * @author frisk\n * @param {string} props.id           게시물 ID\n * @param {string} props.title        게시물 제목\n * @param {string} props.description  게시물 설명\n * @param {object} props.user         게시물 작성자\n * @param {string} props.createdAt    게시물 작성일\n * @param {number} props.likeCount    게시물 좋아요 수\n * @param {number} props.viewCount    게시물 조회 수\n * @param {string} props.category     게시물 카테고리\n * @param {number} props.commentCount 게시물 댓글 수\n * @param {string} props.thumbnail    게시물 썸네일\n */\nconst PostCardTypeItem = ({\n    id,\n    title,\n    description,\n    user,\n    createdAt,\n    likeCount,\n    viewCount,\n    category,\n    commentCount,\n    thumbnail\n}) => {\n    /**\n     * history 객체 활성화\n     */\n    const history = useHistory();\n\n    return (\n        <Container>\n            <CardImpressWrapper>\n                <CardSelector>\n                    {thumbnail && (\n                        <CardThumbnailWrapper>\n                            <CardThumbnail\n                                onClick={() => history.push(`/post/${id}`)}\n                            >\n                                <img src={thumbnail} alt=\"post thumbnail\" />\n                            </CardThumbnail>\n                        </CardThumbnailWrapper>\n                    )}\n\n                    <MetaWrapper>\n                        <div onClick={() => history.push(`/post/${id}`)}>\n                            <TitleWrapper>\n                                <h3>{title}</h3>\n                            </TitleWrapper>\n                            <Description>{description}</Description>\n                        </div>\n                    </MetaWrapper>\n                    <CardFooter>\n                        <UserWrapper>\n                            <Avatar\n                                src={user.avatar.url}\n                                size=\"30\"\n                                userId={user.id}\n                            />\n\n                            <span>{user.nickname}</span>\n                        </UserWrapper>\n\n                        <MetaColumn>\n                            <BtnLink to={`/category/${category}`}>\n                                {category}\n                            </BtnLink>\n                        </MetaColumn>\n                    </CardFooter>\n                </CardSelector>\n            </CardImpressWrapper>\n        </Container>\n    );\n};\n\nexport default PostCardTypeItem;\n","export const timeForToday = (value) => {\n    const today = new Date();\n    const timeValue = new Date(value);\n\n    const betweenTime = Math.floor(\n        (today.getTime() - timeValue.getTime()) / 1000 / 60\n    );\n    if (betweenTime < 1) return \"방금 전\";\n    if (betweenTime < 60) {\n        return `${betweenTime}분 전`;\n    }\n\n    const betweenTimeHour = Math.floor(betweenTime / 60);\n    if (betweenTimeHour < 24) {\n        return `${betweenTimeHour}시간 전`;\n    }\n\n    const betweenTimeDay = Math.floor(betweenTime / 60 / 24);\n    if (betweenTimeDay < 31) {\n        return `${betweenTimeDay}일 전`;\n    }\n\n    const betweenTimeWeek = Math.floor(betweenTime / 60 / 24 / 7);\n    if (betweenTimeWeek < 5) {\n        return `${betweenTimeWeek}주 전`;\n    }\n\n    const betweenTimeMonth = Math.floor(betweenTime / 60 / 24 / 7 / 12);\n    if (betweenTimeMonth < 13) {\n        return `${betweenTimeMonth}개월 전`;\n    }\n\n    return `${Math.floor(betweenTimeDay / 365)}년 전`;\n};\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\n/**\n * * 검색엔진 최적화를 위한 메타 컴포넌트\n *\n * @Component\n * @author frisk\n * @param props.title Head title\n */\nconst Meta = ({ title, description }) => (\n    <Helmet>\n        <title>{title || \"Frisklog\"}</title>\n        <meta\n            name=\"description\"\n            content={description || \"Blog made by frisk\"}\n        />\n        <meta name=\"twitter:title\" content={title || \"Frisklog\"} />\n        <meta\n            name=\"twitter:description\"\n            content={description || \"Blog made by frisk\"}\n        />\n        <meta name=\"twitter:image:alt\" content=\"frisklog\" />\n    </Helmet>\n);\n\nexport default Meta;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Subject from \"../../components/Subject\";\nimport Meta from \"../../components/Meta\";\nimport Query from \"../../components/Query\";\nimport { GET_POSTS } from \"../../graphql/query/post\";\nimport PostCardTypeItem from \"../../components/PostCardTypeItem\";\n\nconst PostWrapper = styled.div`\n    display: flex;\n    flex: 0 1 auto;\n    flex-direction: row;\n    flex-wrap: wrap;\n    margin: 0 -1rem;\n\n    ${(props) => props.theme.media.phone} {\n        margin: 0;\n    }\n`;\n\n/**\n * * 메인 화면 컴포넌트\n *\n * @Page\n * @author frist\n */\nconst Feed = () => (\n    <div>\n        <Meta />\n        <Subject>추천 게시물</Subject>\n        <PostWrapper>\n            <Query\n                query={GET_POSTS}\n                variables={{\n                    first: 6,\n                    orderBy: \"viewCount_DESC\",\n                    notNullThumb: true\n                }}\n            >\n                {({ data: { posts } }) =>\n                    posts.data.map((post) => (\n                        <PostCardTypeItem key={post.id} {...post} />\n                    ))\n                }\n            </Query>\n        </PostWrapper>\n        <hr />\n        <Subject>인기 게시물</Subject>\n        <PostWrapper>\n            <Query\n                query={GET_POSTS}\n                variables={{\n                    first: 6,\n                    orderBy: \"likeCount_DESC\",\n                    notNullThumb: true\n                }}\n            >\n                {({ data: { posts } }) =>\n                    posts.data.map((post) => (\n                        <PostCardTypeItem key={post.id} {...post} />\n                    ))\n                }\n            </Query>\n        </PostWrapper>\n    </div>\n);\n\nexport default Feed;\n","import { gql } from \"@apollo/client\";\n\n/**\n * * 게시물 검색\n *\n * @query\n * @author frisk\n * @param $skip           건너뛸 목록의 수\n * @param $first          요청 목록의 수\n * @param $orderBy        정렬\n * @param $query          검색어\n * @param $category       카테고리\n * @param $userId         사용자 ID\n * @param $notNullThumb   썸네일 있는 것만 요청할 지\n */\nexport const GET_POSTS = gql`\n    query GetPosts(\n        $skip: Int\n        $first: Int\n        $orderBy: String\n        $query: String\n        $category: String\n        $userId: String\n        $notNullThumb: Boolean\n    ) {\n        posts(\n            skip: $skip\n            first: $first\n            orderBy: $orderBy\n            query: $query\n            category: $category\n            userId: $userId\n            notNullThumb: $notNullThumb\n        ) {\n            data {\n                id\n                title\n                description\n                user {\n                    id\n                    nickname\n                    avatar {\n                        url\n                    }\n                }\n                likeCount\n                likes {\n                    id\n                    user {\n                        id\n                    }\n                }\n                createdAt\n                updatedAt\n                viewCount\n                commentCount\n                category\n                thumbnail\n            }\n            total\n        }\n    }\n`;\n\n/**\n * * 게시물 상세 로드\n *\n * @query\n * @author frisk\n * @param $id 건너뛸 목록의 수\n */\nexport const GET_POST = gql`\n    query GetPost($id: String!) {\n        post(id: $id) {\n            id\n            title\n            description\n            content\n            user {\n                id\n                nickname\n                avatar {\n                    url\n                }\n            }\n            likeCount\n            likes {\n                id\n                user {\n                    id\n                }\n            }\n            createdAt\n            updatedAt\n            viewCount\n            category\n        }\n    }\n`;\n"],"sourceRoot":""}